{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["speech","Speech","key","App","onFinalised","text","toLowerCase","lights_url","thermostat_url","includes","axios","get","then","response","console","log","_this","say","split","indexOf","length","parseInt","e","message","onEndEvent","state","listening","startListening","onAnythingSaid","init","volume","lang","rate","pitch","voice","splitSentences","listeners","onvoiceschanged","voices","this","listener","SpeechToText","setState","speak","catch","error","_this2","react_default","a","createElement","className","ref","onClick","refs","input","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAMMA,EAAS,WAAIC,GAEbC,EAAM,iCA2FGC,6MAvFXC,YAAc,SAAAC,GACVA,EAAOA,EAAKC,cACZ,IAAIC,EAAa,0CAA4CL,EACzDM,EAAiB,8CAAgDN,EAarE,GAXIG,EAAKI,SAAS,UAAYJ,EAAKI,SAAS,OACxCC,IAAMC,IAAIJ,EAAa,aAAaK,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KAClEG,EAAKC,IAAI,4BACDZ,EAAKI,SAAS,UAAYJ,EAAKI,SAAS,QAC/CC,IAAMC,IAAIJ,EAAa,cAAcK,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KAClEG,EAAKC,IAAI,6BACFZ,EAAKI,SAAS,WAAaJ,EAAKI,SAAS,WAAaJ,EAAKI,SAAS,WAAaJ,EAAKI,SAAS,UACtGC,IAAMC,IAAIJ,EAAa,iBAAiBK,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KACrEG,EAAKC,IAAI,2BAGTZ,EAAKI,SAAS,gBAAkBJ,EAAKI,SAAS,OAASJ,EAAKa,MAAM,KAAKC,QAAQ,MAAQd,EAAKa,MAAM,KAAKE,OAAS,EAChH,IACIV,IAAMC,IAAIH,EAAiB,SAAWa,SAAShB,EAAKa,MAAM,KAAKb,EAAKa,MAAM,KAAKC,QAAQ,MAAQ,KAAKP,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KACjIG,EAAKC,IAAI,+BAAiCI,SAAShB,EAAKa,MAAM,KAAKb,EAAKa,MAAM,KAAKC,QAAQ,MAAQ,KACrG,MAAOG,GACLR,QAAQC,IAAIO,EAAEC,SAInBlB,EAAKI,SAAS,UACbO,EAAKC,IAAI,sCAEbH,QAAQC,IAAI,gBAAkBV,MAGlCmB,WAAa,WACLR,EAAKS,MAAMC,WACXV,EAAKW,oBAIbC,eAAiB,SAAAvB,GACbS,QAAQC,IAAI,mBAAqBV,uFAIjCL,EAAO6B,KAAK,CACRC,OAAU,EACTC,KAAQ,QACRC,KAAQ,EACRC,MAAS,EACTC,MAAQ,oDACRC,gBAAkB,EAClBC,UAAa,CACTC,gBAAmB,SAACC,GAChBxB,QAAQC,IAAI,sBAAuBuB,OAIhDC,KAAKC,SAAW,IAAIC,IAAaF,KAAKnC,YAAamC,KAAKf,WAAYe,KAAKX,gBACzEW,KAAKZ,0DAILY,KAAKC,SAASb,iBACdY,KAAKG,SAAS,CAAEhB,WAAW,gCAG3BrB,GACAL,EAAO2C,MAAM,CAAEtC,SAAQO,KAAK,WACxBE,QAAQC,IAAI,cAAgBV,KAC7BuC,MAAM,SAAAtB,GACLR,QAAQ+B,MAAM,sBAAuBvB,sCAIpC,IAAAwB,EAAAP,KACL,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAjB,eAEEH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,IAAI,UACXJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS,WACbN,EAAK1C,YAAY0C,EAAKO,KAAKC,MAAMC,OACjCT,EAAKO,KAAKC,MAAMC,MAAQ,KAF5B,kBAhFMC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.5e16611b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport SpeechToText from 'speech-to-text';\nimport axios from 'axios'\n\nimport Speech from 'speak-tts'\n\nconst speech = new Speech();\n\nconst key = \"blueberrypineapplecactikoi1025\";\n\nclass App extends Component {\n\n    onFinalised = text => {\n        text = text.toLowerCase();\n        let lights_url = \"http://localhost:8000/lights?admin_key=\" + key;\n        let thermostat_url = \"http://localhost:8000/thermostat?admin_key=\" + key;\n\n        if (text.includes(\"light\") && text.includes(\"on\")) {\n            axios.get(lights_url + \"&state=on\").then(response => console.log(response));\n           this.say(\"I'll turn on the lights\");\n        } else if (text.includes(\"light\") && text.includes(\"off\")) {\n            axios.get(lights_url + \"&state=off\").then(response => console.log(response));\n            this.say(\"I'll turn off the lights\");\n        } else if (text.includes(\"light\") && (text.includes(\"switch\") || text.includes(\"toggle\") || text.includes(\"hit\"))) {\n            axios.get(lights_url + \"&state=toggle\").then(response => console.log(response));\n            this.say(\"I'll toggle the lights\");\n        }\n\n        if (text.includes(\"temperature\") && text.includes(\"to\") && text.split(\" \").indexOf(\"to\") < text.split(\" \").length - 1) {\n            try {\n                axios.get(thermostat_url + \"&temp=\" + parseInt(text.split(\" \")[text.split(\" \").indexOf(\"to\") + 1])).then(response => console.log(response));\n                this.say(\"I'll set the temperature to \" + parseInt(text.split(\" \")[text.split(\" \").indexOf(\"to\") + 1]));\n            } catch (e) {\n                console.log(e.message);\n            }\n        }\n\n        if(text.includes(\"thank\"))\n            this.say(\"What can I say except your welcome\");\n\n        console.log(\"onFinalised: \" + text);\n    };\n\n    onEndEvent = () => {\n        if (this.state.listening) {\n            this.startListening();\n        }\n    };\n\n    onAnythingSaid = text => {\n        console.log(\"onAnythingSaid: \" + text);\n    };\n\n    componentDidMount() {\n        speech.init({\n            'volume': 1,\n             'lang': 'en-GB',\n             'rate': 1,\n             'pitch': 1,\n             'voice':'Microsoft David Desktop - English (United States)',\n             'splitSentences': true,\n             'listeners': {\n                 'onvoiceschanged': (voices) => {\n                     console.log(\"Event voiceschanged\", voices)\n                 }\n             }\n        })\n        this.listener = new SpeechToText(this.onFinalised, this.onEndEvent, this.onAnythingSaid);\n        this.startListening();\n    }\n\n    startListening() {\n        this.listener.startListening();\n        this.setState({ listening: true });\n    }\n\n    say(text) {\n        speech.speak({ text }).then(() => {\n            console.log(\"Responded: \" + text)\n        }).catch(e => {\n            console.error(\"An error occurred :\", e)\n        })\n    }\n\n    render() {\n        return ( \n          <div className = \"App\" >\n            Listening... \n            <br />\n            <input ref=\"input\"/>\n            <button onClick={() => {\n                this.onFinalised(this.refs.input.value);\n                this.refs.input.value = \"\";\n            }}>Submit</button>\n          </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}