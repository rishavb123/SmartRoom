{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["key","App","_this","this","listener","SpeechToText","text","lights_url","includes","axios","get","then","response","console","log","split","indexOf","length","thermostat_url","parseInt","e","message","state","listening","startListening","setState","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAIMA,EAAM,iCAuDGC,8LApDS,IAAAC,EAAAC,KAkChBA,KAAKC,SAAW,IAAIC,IAjCA,SAAAC,GAChB,IAAIC,EAAa,0CAA4CP,EAW7D,GARIM,EAAKE,SAAS,UAAYF,EAAKE,SAAS,MACxCC,IAAMC,IAAIH,EAAa,aAAaI,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KAC1DN,EAAKE,SAAS,UAAYF,EAAKE,SAAS,OAC/CC,IAAMC,IAAIH,EAAa,cAAcI,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KAC3DN,EAAKE,SAAS,WAAaF,EAAKE,SAAS,WAAaF,EAAKE,SAAS,WAAaF,EAAKE,SAAS,SACtGC,IAAMC,IAAIH,EAAa,iBAAiBI,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KAGrEN,EAAKE,SAAS,gBAAkBF,EAAKE,SAAS,OAASF,EAAKS,MAAM,KAAKC,QAAQ,MAAQV,EAAKS,MAAM,KAAKE,OAAS,EAChH,IACIR,IAAMC,IAAIQ,iFAA4BC,SAASb,EAAKS,MAAM,KAAKT,EAAKS,MAAM,KAAKC,QAAQ,MAAQ,KAAKL,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,KACnI,MAAOQ,GACLP,QAAQC,IAAIM,EAAEC,SAItBR,QAAQC,IAAI,gBAAkBR,IAGf,WACXJ,EAAKoB,MAAMC,WACXrB,EAAKsB,kBAIU,SAAAlB,GACnBO,QAAQC,IAAI,mBAAqBR,KAIrCH,KAAKqB,0DAILrB,KAAKC,SAASoB,iBACdrB,KAAKsB,SAAS,CAAEF,WAAW,qCAI3B,OAASG,EAAAC,EAAAC,cAAA,OACDC,UAAY,OADX,wBA7CCC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.5220a372.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport SpeechToText from 'speech-to-text';\r\nimport axios from 'axios'\r\n\r\nconst key = \"blueberrypineapplecactikoi1025\";\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        const onFinalised = text => {\r\n            let lights_url = \"http://localhost:8000/lights?admin_key=\" + key;\r\n            let thermostat_url = \"http://localhost:8000/therostat?admin_key=\" + key;\r\n\r\n            if (text.includes(\"light\") && text.includes(\"on\")) {\r\n                axios.get(lights_url + \"&state=on\").then(response => console.log(response));\r\n            } else if (text.includes(\"light\") && text.includes(\"off\")) {\r\n                axios.get(lights_url + \"&state=off\").then(response => console.log(response));\r\n            } else if (text.includes(\"light\") && (text.includes(\"switch\") || text.includes(\"toggle\") || text.includes(\"hit\"))) {\r\n                axios.get(lights_url + \"&state=toggle\").then(response => console.log(response));\r\n            }\r\n\r\n            if (text.includes(\"temperature\") && text.includes(\"to\") && text.split(\" \").indexOf(\"to\") < text.split(\" \").length - 1) {\r\n                try {\r\n                    axios.get(thermostat_url + \"&temp=\" + parseInt(text.split(\" \")[text.split(\" \").indexOf(\"to\") + 1])).then(response => console.log(response));\r\n                } catch (e) {\r\n                    console.log(e.message);\r\n                }\r\n            }\r\n\r\n            console.log(\"onFinalised: \" + text);\r\n        };\r\n\r\n        const onEndEvent = () => {\r\n            if (this.state.listening) {\r\n                this.startListening();\r\n            }\r\n        };\r\n\r\n        const onAnythingSaid = text => {\r\n            console.log(\"onAnythingSaid: \" + text);\r\n        };\r\n\r\n        this.listener = new SpeechToText(onFinalised, onEndEvent, onAnythingSaid);\r\n        this.startListening();\r\n    }\r\n\r\n    startListening() {\r\n        this.listener.startListening();\r\n        this.setState({ listening: true });\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            div className = \"App\" >\r\n            Listening... <\r\n            /div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}